diff --git a/dash_analytics/api/urls.py b/dash_analytics/api/urls.py
index 571035a..ebd53d1 100644
--- a/dash_analytics/api/urls.py
+++ b/dash_analytics/api/urls.py
@@ -5,6 +5,7 @@ from .views.product_views import ProductViewSet
 from .views.order_views import OrderViewSet
 from analytics.api_views import SalesTrendView, CustomerBehaviorView, DemographicsView
 from analytics.prediction_views import PredictionView
+from analytics.geographical_views import GeographicalView
 
 urlpatterns = [
     path('upload/', DataUploadView.as_view(), name='data-upload'),
@@ -21,4 +22,5 @@ urlpatterns = [
     path('analytics/demographics/',
          DemographicsView.as_view(), name='demographics-api'),
     path('analytics/predictions/', PredictionView.as_view(), name='predictions-api'),
+    path('analytics/geographical/', GeographicalView.as_view(), name='geographical-api'),
 ]
diff --git a/dash_analytics/templates/core/geographical_insights.html b/dash_analytics/templates/core/geographical_insights.html
index 4855bf3..723568f 100644
--- a/dash_analytics/templates/core/geographical_insights.html
+++ b/dash_analytics/templates/core/geographical_insights.html
@@ -266,17 +266,88 @@ DashAnalytics{% endblock %} {% block content %}
 
     function fetchGeographicalData() {
         showLoading();
-        fetch('/api/geographical-insights/')
-            .then(response => response.json())
+        
+        // Get filter values
+        const periodValue = document.getElementById("period-select").value;
+        const regionValue = document.getElementById("region-select").value;
+        
+        console.log(`Fetching geographical data - Period: ${periodValue}, Region: ${regionValue}`);
+        
+        // Construct API URL with query parameters
+        const apiUrl = `/api/analytics/geographical/?period=${periodValue}&region=${regionValue}`;
+        
+        fetch(apiUrl)
+            .then(response => {
+                if (!response.ok) {
+                    throw new Error(`HTTP error! Status: ${response.status}`);
+                }
+                return response.json();
+            })
             .then(data => {
+                console.log("Received geographical data:", data);
+                
+                // Validate data structure before rendering
+                if (!data) {
+                    console.error("No data received from API");
+                    throw new Error("No data received from API");
+                }
+                
+                // Create empty structures for missing data components
+                // This ensures that our rendering functions don't fail when data is missing
+                if (!data.cityCustomers) {
+                    console.warn("No city customer data received, creating empty structure");
+                    data.cityCustomers = {
+                        top: { labels: [], data: [] },
+                        bottom: { labels: [], data: [] }
+                    };
+                }
+                
+                if (!data.cityProfit) {
+                    console.warn("No city profit data received, creating empty structure");
+                    data.cityProfit = {
+                        profit: { labels: [], data: [] },
+                        loss: { labels: [], data: [] }
+                    };
+                }
+                
+                if (!data.regions) {
+                    console.warn("No regions data received, creating empty structure");
+                    data.regions = [];
+                }
+                
+                if (!data.mapData) {
+                    console.warn("No map data received, creating empty structure");
+                    data.mapData = {};
+                }
+                
+                // Render components with the validated data
                 renderCityCustomersCharts(data.cityCustomers);
                 renderCityProfitCharts(data.cityProfit);
+                renderWorldMap(data.mapData);
+                renderRegionsTable(data.regions);
+                
                 hideLoading();
             })
             .catch(error => {
                 console.error("Error loading geographical data:", error);
                 hideLoading();
-                alert("Failed to load geographical insights. Please try again.");
+                
+                // Show detailed error message on the page instead of a generic one
+                const chartContainers = document.querySelectorAll(".h-64, .h-80, .h-96");
+                chartContainers.forEach(container => {
+                    container.innerHTML = `
+                        <div class="flex items-center justify-center h-full">
+                            <div class="text-center">
+                                <p class="text-red-500 dark:text-red-400 mb-2">
+                                    Failed to load geographical data
+                                </p>
+                                <p class="text-gray-500 dark:text-gray-400 text-sm">
+                                    ${error.message || "Please try again or contact support if the problem persists"}
+                                </p>
+                            </div>
+                        </div>
+                    `;
+                });
             });
     }
 
@@ -333,6 +404,9 @@ DashAnalytics{% endblock %} {% block content %}
     }
 
     function renderCityProfitCharts(data) {
+        // Log data to check what we're receiving
+        console.log("Profit/Loss data:", data);
+        
         const chartOptions = {
             responsive: true,
             maintainAspectRatio: false,
@@ -344,152 +418,153 @@ DashAnalytics{% endblock %} {% block content %}
                         text: 'Amount ($)'
                     },
                     ticks: {
-                        callback: value => '$' + Math.abs(value).toLocaleString()
+                        callback: function(value) {
+                            return '$' + Math.abs(value).toLocaleString();
+                        }
+                    }
+                },
+                x: {
+                    ticks: {
+                        autoSkip: false,
+                        maxRotation: 45,
+                        minRotation: 45
+                    }
+                }
+            },
+            plugins: {
+                tooltip: {
+                    callbacks: {
+                        label: function(context) {
+                            return '$' + Math.abs(context.parsed.y).toLocaleString();
+                        }
                     }
                 }
             }
         };
 
-        // Top Cities by Profit Chart
-        const profitCtx = document.getElementById('topProfitChart').getContext('2d');
-        if (topProfitChart) topProfitChart.destroy();
-        topProfitChart = new Chart(profitCtx, {
-            type: 'bar',
-            data: {
-                labels: data.profit.labels,
-                datasets: [{
-                    label: 'Total Profit',
-                    data: data.profit.data,
-                    backgroundColor: 'rgba(16, 185, 129, 0.6)',
-                    borderColor: '#10b981',
-                    borderWidth: 1
-                }]
-            },
-            options: chartOptions
-        });
-
-        // Cities by Loss Chart
-        const lossCtx = document.getElementById('topLossChart').getContext('2d');
-        if (topLossChart) topLossChart.destroy();
-        topLossChart = new Chart(lossCtx, {
-            type: 'bar',
-            data: {
-                labels: data.loss.labels,
-                datasets: [{
-                    label: 'Total Loss',
-                    data: data.loss.data,
-                    backgroundColor: 'rgba(239, 68, 68, 0.6)',
-                    borderColor: '#ef4444',
-                    borderWidth: 1
-                }]
-            },
-            options: chartOptions
-        });
-    }
-
-    // Data generator functions
-    function generateMapData() {
-        return {
-            US: 8500,
-            CA: 2200,
-            GB: 3700,
-            DE: 2800,
-            FR: 2100,
-            ES: 1800,
-            IT: 1600,
-            CN: 4200,
-            JP: 3100,
-            IN: 2600,
-            BR: 1900,
-            AU: 1500,
-            ZA: 900,
-            RU: 1200,
-            MX: 1100,
-        };
-    }
+        try {
+            // Validate we have a proper data structure
+            if (!data || typeof data !== 'object') {
+                throw new Error("Invalid data structure for profit/loss charts");
+            }
 
-    function generateCountriesData() {
-        return {
-            labels: [
-                "United States",
-                "China",
-                "United Kingdom",
-                "Germany",
-                "Japan",
-                "India",
-                "Canada",
-                "France",
-                "Brazil",
-                "Australia",
-            ],
-            data: [8500, 4200, 3700, 2800, 3100, 2600, 2200, 2100, 1900, 1500],
-        };
-    }
+            // Handle profit chart
+            const profitContainer = document.getElementById('topProfitChart');
+            if (profitContainer) {
+                const profitCtx = profitContainer.getContext('2d');
+                
+                // Make sure we have valid data before rendering
+                if (data.profit && 
+                    Array.isArray(data.profit.labels) && 
+                    Array.isArray(data.profit.data) && 
+                    data.profit.labels.length > 0 && 
+                    data.profit.data.length > 0) {
+                    
+                    // Check for any null or undefined values in data
+                    const validProfitData = data.profit.data.map(val => {
+                        if (val === null || val === undefined || isNaN(parseFloat(val))) {
+                            return 0;
+                        }
+                        return Math.abs(parseFloat(val));
+                    });
+                    
+                    // Destroy existing chart if it exists
+                    if (topProfitChart) topProfitChart.destroy();
+                    
+                    // Create new chart
+                    topProfitChart = new Chart(profitCtx, {
+                        type: 'bar',
+                        data: {
+                            labels: data.profit.labels,
+                            datasets: [{
+                                label: 'Total Profit',
+                                data: validProfitData,
+                                backgroundColor: 'rgba(16, 185, 129, 0.6)',
+                                borderColor: '#10b981',
+                                borderWidth: 1
+                            }]
+                        },
+                        options: chartOptions
+                    });
+                } else {
+                    console.warn("No profit data available for chart");
+                    profitContainer.parentNode.innerHTML = 
+                        '<div class="flex items-center justify-center h-full text-gray-500">No profit data available</div>';
+                }
+            }
 
-    function generateCitiesData() {
-        return {
-            labels: [
-                "New York",
-                "London",
-                "Tokyo",
-                "Shanghai",
-                "Los Angeles",
-                "Paris",
-                "Berlin",
-                "Toronto",
-                "Sydney",
-                "Mumbai",
-            ],
-            data: [1200, 950, 850, 780, 720, 680, 590, 540, 510, 490],
-        };
+            // Handle loss chart
+            const lossContainer = document.getElementById('topLossChart');
+            if (lossContainer) {
+                const lossCtx = lossContainer.getContext('2d');
+                
+                // Make sure we have valid data before rendering
+                if (data.loss && 
+                    Array.isArray(data.loss.labels) && 
+                    Array.isArray(data.loss.data) && 
+                    data.loss.labels.length > 0 && 
+                    data.loss.data.length > 0) {
+                    
+                    // Check for any null or undefined values in data
+                    const validLossData = data.loss.data.map(val => {
+                        if (val === null || val === undefined || isNaN(parseFloat(val))) {
+                            return 0;
+                        }
+                        return Math.abs(parseFloat(val));
+                    });
+                    
+                    // Destroy existing chart if it exists
+                    if (topLossChart) topLossChart.destroy();
+                    
+                    // Create new chart
+                    topLossChart = new Chart(lossCtx, {
+                        type: 'bar',
+                        data: {
+                            labels: data.loss.labels,
+                            datasets: [{
+                                label: 'Total Loss',
+                                data: validLossData,
+                                backgroundColor: 'rgba(239, 68, 68, 0.6)',
+                                borderColor: '#ef4444',
+                                borderWidth: 1
+                            }]
+                        },
+                        options: chartOptions
+                    });
+                } else {
+                    console.warn("No loss data available for chart");
+                    lossContainer.parentNode.innerHTML = 
+                        '<div class="flex items-center justify-center h-full text-gray-500">No loss data available</div>';
+                }
+            }
+        } catch (error) {
+            console.error("Error rendering profit/loss charts:", error);
+            
+            // Provide fallback displays for both charts on error
+            const charts = ['topProfitChart', 'topLossChart'];
+            charts.forEach(chartId => {
+                const container = document.getElementById(chartId);
+                if (container) {
+                    container.parentNode.innerHTML = 
+                        '<div class="flex items-center justify-center h-full text-red-500">Error loading chart data</div>';
+                }
+            });
+        }
     }
 
-    function generateRegionsData() {
-        return [
-            {
-                region: "North America",
-                currentSales: "$12,450,000",
-                previousSales: "$10,890,000",
-                growth: "+14.3%",
-                marketShare: "35.6%",
-            },
-            {
-                region: "Europe",
-                currentSales: "$9,870,000",
-                previousSales: "$9,120,000",
-                growth: "+8.2%",
-                marketShare: "28.2%",
-            },
-            {
-                region: "Asia",
-                currentSales: "$8,650,000",
-                previousSales: "$7,340,000",
-                growth: "+17.8%",
-                marketShare: "24.7%",
-            },
-            {
-                region: "South America",
-                currentSales: "$1,950,000",
-                previousSales: "$1,780,000",
-                growth: "+9.5%",
-                marketShare: "5.6%",
-            },
-            {
-                region: "Oceania",
-                currentSales: "$1,450,000",
-                previousSales: "$1,380,000",
-                growth: "+5.1%",
-                marketShare: "4.1%",
-            },
-            {
-                region: "Africa",
-                currentSales: "$630,000",
-                previousSales: "$520,000",
-                growth: "+21.2%",
-                marketShare: "1.8%",
-            },
-        ];
-    }
+    // Map coordinates for some main cities (for future use if needed)
+    const cityCoordinates = {
+        "New York": [40.7128, -74.0060],
+        "London": [51.5074, -0.1278],
+        "Tokyo": [35.6762, 139.6503],
+        "Shanghai": [31.2304, 121.4737],
+        "Los Angeles": [34.0522, -118.2437],
+        "Paris": [48.8566, 2.3522],
+        "Berlin": [52.5200, 13.4050],
+        "Toronto": [43.6511, -79.3470],
+        "Sydney": [-33.8688, 151.2093],
+        "Mumbai": [19.0760, 72.8777]
+    };
 
     // Rendering functions
     function renderWorldMap(data) {
@@ -503,58 +578,107 @@ DashAnalytics{% endblock %} {% block content %}
         const selectedRegionColor = "#3b82f6";
         const textColor = isDarkMode ? "#e5e7eb" : "#374151";
 
+        // Log data for debugging
+        console.log("Map data:", data);
+        
+        if (!data || Object.keys(data).length === 0) {
+            console.log("No map data available to display");
+            const errorMessage = document.createElement("div");
+            errorMessage.className = "flex items-center justify-center h-full";
+            errorMessage.innerHTML = '<p class="text-gray-500 dark:text-gray-400">No geographical data available to display</p>';
+            mapContainer.appendChild(errorMessage);
+            return;
+        }
+
         // Calculate max value for consistent scaling
-        const maxValue = Math.max(...Object.values(data));
+        const maxValue = Math.max(1, ...Object.values(data)); // Ensure we don't divide by zero
 
         // Transform data for jsvectormap
         const mapValues = {};
         Object.keys(data).forEach((country) => {
+            // Ensure the value is scaled properly between 0-100
             mapValues[country] = (data[country] / maxValue) * 100;
         });
 
+        // Add city markers with coordinates
+        const markers = [];
+        Object.entries(cityCoordinates).forEach(([city, coordinates]) => {
+            // Add markers for major cities to give better context
+            markers.push({
+                name: city,
+                coords: coordinates,
+                style: {
+                    fill: '#ff9e00'
+                }
+            });
+        });
+
         // Create new map
-        worldMap = new jsVectorMap({
-            selector: "#world-map",
-            map: "world",
-            backgroundColor: backgroundColor,
-            regionStyle: {
-                initial: {
-                    fill: regionColor,
-                    stroke: isDarkMode ? "#4b5563" : "#d1d5db",
-                    "stroke-width": 0.5,
+        try {
+            worldMap = new jsVectorMap({
+                selector: "#world-map",
+                map: "world",
+                backgroundColor: backgroundColor,
+                regionStyle: {
+                    initial: {
+                        fill: regionColor,
+                        stroke: isDarkMode ? "#4b5563" : "#d1d5db",
+                        "stroke-width": 0.5,
+                    },
+                    hover: {
+                        fill: "#60a5fa",
+                    },
+                    selected: {
+                        fill: selectedRegionColor,
+                    },
                 },
-                hover: {
-                    fill: "#60a5fa",
+                markers: markers,
+                markerStyle: {
+                    initial: {
+                        r: 5,
+                        fill: '#ff5c00',
+                        stroke: '#fff',
+                        "stroke-width": 2,
+                        "stroke-opacity": 0.6
+                    },
+                    hover: {
+                        r: 7,
+                        stroke: '#fff',
+                        "stroke-width": 3
+                    }
                 },
-                selected: {
-                    fill: selectedRegionColor,
+                labels: {
+                    markers: {
+                        render: (marker) => marker.name,
+                        offsets: (index) => [0, 0],
+                    },
                 },
-            },
-            labels: {
-                markers: {
-                    render: (marker) => marker.name,
-                    offsets: (index) => [0, 0],
+                series: {
+                    regions: [
+                        {
+                            values: mapValues,
+                            scale: ["#c6e0ff", "#0059ff"],
+                            normalizeFunction: "linear",
+                        },
+                    ],
                 },
-            },
-            series: {
-                regions: [
-                    {
-                        values: mapValues,
-                        scale: ["#c6e0ff", "#0059ff"],
-                        normalizeFunction: "linear",
-                    },
-                ],
-            },
-            onRegionTipShow: function (event, tooltip, code) {
-                if (data[code]) {
-                    tooltip.innerHTML = `${tooltip.innerHTML}: $${data[
-                        code
-                    ].toLocaleString()}`;
-                } else {
-                    tooltip.innerHTML = `${tooltip.innerHTML}: No data available`;
-                }
-            },
-        });
+                onRegionTipShow: function (event, tooltip, code) {
+                    if (data[code]) {
+                        tooltip.innerHTML = `${tooltip.innerHTML}: $${data[
+                            code
+                        ].toLocaleString()}`;
+                    } else {
+                        tooltip.innerHTML = `${tooltip.innerHTML}: No data available`;
+                    }
+                },
+            });
+        } catch (error) {
+            console.error("Error rendering world map:", error);
+            const errorMessage = document.createElement("div");
+            errorMessage.className = "flex items-center justify-center h-full";
+            errorMessage.innerHTML = '<p class="text-red-500">Error loading map. Please try again.</p>';
+            mapContainer.appendChild(errorMessage);
+        }
     }
 
     function renderCountriesChart(data) {
@@ -699,28 +823,36 @@ DashAnalytics{% endblock %} {% block content %}
 
     function renderRegionsTable(data) {
         const tableBody = document.getElementById("regions-table");
-        tableBody.innerHTML = ""; // Clear existing rows except loading row
-
-        // Add loading row back
-        const loadingRow = document.querySelector(".animate-pulse");
-        if (loadingRow) {
-            tableBody.appendChild(loadingRow);
+        tableBody.innerHTML = ""; // Clear all existing rows
+
+        // Make sure we have data
+        if (!data || data.length === 0) {
+            console.log("No region data available to display");
+            const emptyRow = document.createElement("tr");
+            emptyRow.innerHTML = `
+                <td colspan="5" class="px-6 py-4 text-center text-gray-500 dark:text-gray-400">No data available</td>
+            `;
+            tableBody.appendChild(emptyRow);
+            return;
         }
 
+        console.log("Regions data:", data);
+        
+        // Add data rows
         data.forEach((region) => {
             const row = document.createElement("tr");
             row.classList.add("hover:bg-gray-100", "dark:hover:bg-gray-700");
 
-            const growthClass = region.growth.includes("+")
+            const growthClass = region.growth && region.growth.includes("+")
                 ? "text-green-500"
                 : "text-red-500";
 
             row.innerHTML = `
-                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-gray-200">${region.region}</td>
-                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">${region.currentSales}</td>
-                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">${region.previousSales}</td>
-                <td class="px-6 py-4 whitespace-nowrap text-sm ${growthClass}">${region.growth}</td>
-                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">${region.marketShare}</td>
+                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-gray-200">${region.region || 'Unknown'}</td>
+                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">${region.currentSales || '$0.00'}</td>
+                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">${region.previousSales || '$0.00'}</td>
+                <td class="px-6 py-4 whitespace-nowrap text-sm ${growthClass}">${region.growth || '0.0%'}</td>
+                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">${region.marketShare || '0.0%'}</td>
             `;
 
             tableBody.appendChild(row);
