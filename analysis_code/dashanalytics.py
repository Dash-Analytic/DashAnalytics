# -*- coding: utf-8 -*-
"""dashanalytics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oKzGNdKpIaOMGZq4O8d4_iIWzxZk6fAm

# **Preprocess the Data**
"""

# Import library
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# Connect with drive
from google.colab import drive

drive.mount('/content/drive',  force_remount=True)

# Import dataset from drive
df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/synthetic_online_retail_data.csv')

print(df.head())

print(df)

# Displaying DataFrame info
df.info()

# Displaying DataFrame column data types
df.dtypes

print(df.describe())

# Convert date columns
df['InvoiceDate'] = pd.to_datetime(df['order_date'])

# Drop nulls values
df.dropna(subset=['customer_id', 'product_id', 'order_date', 'category_name', 'product_name', 'quantity', 'price'], inplace=True)

# Remove duplicates
df.drop_duplicates(inplace=True)

# Create derived columns
df['TotalPrice'] = df['quantity'] * df['price']
df['Month'] = df['InvoiceDate'].dt.to_period('M')
df['Week'] = df['InvoiceDate'].dt.isocalendar().week
df['Year'] = df['InvoiceDate'].dt.year
df['Quarter'] = df['InvoiceDate'].dt.quarter

print(df)

"""#  **1. Sales Trend**"""

# Weekly Sales
weekly_sales = df.groupby('Week')['TotalPrice'].sum().reset_index()
print(weekly_sales)

plt.figure(figsize=(12, 5))
sns.lineplot(data=weekly_sales, x='Week', y='TotalPrice')
plt.title('Weekly Sales Trend')
plt.show()

# Monthly Sales
monthly_sales = df.groupby('Month')['TotalPrice'].sum().reset_index()
monthly_sales['Month'] = monthly_sales['Month'].astype(str)
print(monthly_sales)

plt.figure(figsize=(12, 5))
sns.lineplot(data=monthly_sales, x='Month', y='TotalPrice')
plt.xticks(rotation=45)
plt.title('Monthly Sales Trend')
plt.show()

# yearly sales
yearly_sales = df.groupby('Year')['TotalPrice'].sum().reset_index()
print(yearly_sales)

plt.figure(figsize=(12, 5))
sns.lineplot(data=yearly_sales, x='Year', y='TotalPrice')
plt.title('Yearly Sales Trend')
plt.show()

# yearly sales in percentage
total_sales = yearly_sales.sum()
yearly_sales_percentage = (yearly_sales / total_sales) * 100
print(yearly_sales_percentage)


plt.figure(figsize=(14, 8))
yearly_sales_percentage.plot(kind='bar', color='skyblue')

plt.title('Yearly Sales Percentage')
plt.xlabel('Year')
plt.ylabel('Sales Percentage (%)')
plt.xticks(rotation=45)
plt.grid(axis='y')
plt.tight_layout()
plt.show()

# Seasonal sales trend
seasonal_sales = df.groupby(['Year', 'Quarter'])['TotalPrice'].sum().reset_index()
print(seasonal_sales)

seasonal_sales.plot(x='Year', y='TotalPrice', kind='bar', stacked=True)
plt.title('Seasonal Sales Trend')
plt.xlabel('Year')
plt.ylabel('Total Sales')
plt.xticks(rotation=45)

# monthly sales growth rate
monthly_sales['GrowthRate'] = monthly_sales['TotalPrice'].pct_change() * 100
print(monthly_sales[['Month', 'GrowthRate']])

plt.figure(figsize=(14, 6))
plt.plot(monthly_sales['Month'], monthly_sales['GrowthRate'], marker='o', color='mediumseagreen')

plt.title('Monthly Sales Growth Rate')
plt.xlabel('Month')
plt.ylabel('Growth Rate (%)')
plt.xticks(rotation=45)
plt.grid(True)
plt.tight_layout()
plt.show()

"""# **Product Performance**"""

# Best-selling products
best_products = df.groupby('product_name')['TotalPrice'].sum().sort_values(ascending=False).head(10)
print(best_products)

plt.figure(figsize=(14, 8))
best_products.plot(kind='barh', color='skyblue')

plt.title('Top 10 Best-Selling Products')
plt.xlabel('Total Sales')
plt.ylabel('Product Name')
# Highest sales at the top
plt.gca().invert_yaxis()
plt.grid(axis='x')
plt.tight_layout()
plt.show()

# Worst-selling products
worst_products = df.groupby('product_name')['TotalPrice'].sum().sort_values(ascending=True).head(10)
print(worst_products)

plt.figure(figsize=(14, 8))
worst_products.plot(kind='barh', color='salmon')

plt.title('Top 10 Worst-Selling Products')
plt.xlabel('Total Sales')
plt.ylabel('Product Name')
plt.grid(axis='x')
plt.tight_layout()
plt.show()

# Volume by brand/category
volume_by_category = df.groupby('category_name')['quantity'].sum().sort_values(ascending=False)
print(volume_by_category)

plt.figure(figsize=(14, 8))
volume_by_category.plot(kind='bar', color='teal')
plt.title('Total Volume Sold by Category')
plt.xlabel('Category')
plt.ylabel('Quantity Sold')
plt.xticks(rotation=45, ha='right')
plt.grid(axis='y')
plt.tight_layout()
plt.show()

volume_by_product = df.groupby('product_name')['quantity'].sum().sort_values(ascending=False).head(10)
print(volume_by_product)

plt.figure(figsize=(14, 8))
volume_by_product.plot(kind='barh', color='seagreen')
plt.title('Top 10 Products by Volume Sold')
plt.xlabel('Quantity Sold')
plt.ylabel('Product Name')
plt.gca().invert_yaxis()
plt.grid(axis='x')
plt.tight_layout()
plt.show()

# Avg revenue per product/category
avg_rev_product = df.groupby('product_name')['TotalPrice'].mean().sort_values(ascending=False).head(10)
print(avg_rev_product)

plt.figure(figsize=(14, 8))
avg_rev_product.plot(kind='barh', color='peru')
plt.title('Top 10 Products by Average Revenue')
plt.xlabel('Average Revenue (per sale)')
plt.ylabel('Product Name')
plt.gca().invert_yaxis()
plt.grid(axis='x')
plt.tight_layout()
plt.show()

avg_rev_category = df.groupby('category_name')['TotalPrice'].mean().sort_values(ascending=False)
print(avg_rev_category)


plt.figure(figsize=(14, 8))
avg_rev_category.plot(kind='bar', color='seagreen')
plt.title('Average Revenue per Category')
plt.xlabel('Category')
plt.ylabel('Average Revenue (per sale)')
plt.xticks(rotation=45, ha='right')
plt.grid(axis='y')
plt.tight_layout()
plt.show()

# Highest profit category
profit_category = df.groupby('category_name')['TotalPrice'].sum().sort_values(ascending=False).head()
print(profit_category)

plt.figure(figsize=(10, 6))
profit_category.plot(kind='bar', color='brown')
plt.title('Top 5 Highest Profit Categories')
plt.xlabel('Category')
plt.ylabel('Total Revenue')
plt.xticks(rotation=45, ha='right')
plt.grid(axis='y')
plt.tight_layout()
plt.show()

