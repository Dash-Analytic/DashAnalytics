{% extends "base.html" %}
{% block title %}Demographics - DashAnalytics{% endblock %}

{% block content %}
<div class="container mx-auto py-8">
    <!-- Filters -->
    <div class="mb-6 bg-white dark:bg-gray-800 shadow rounded-lg p-4">
        <div class="flex flex-wrap gap-4">
            <div class="w-full md:w-auto">
                <label for="time-period" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Time Period</label>
                <select id="time-period" class="bg-gray-100 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md px-3 py-2">
                    <option value="7d">Last 7 Days</option>
                    <option value="30d">Last 30 Days</option>
                    <option value="90d">Last 90 Days</option>
                    <option value="1y" selected>Last Year</option>
                    <option value="all">All Time</option>
                </select>
            </div>
            <div class="w-full md:w-auto">
                <button id="apply-filters" class="mt-6 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md transition">
                    Apply Filters
                </button>
            </div>
        </div>
    </div>
    
    <!-- Status Message -->
    <div id="status-message" class="mb-6 p-4 bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 hidden">
        <p>Loading data...</p>
    </div>

    <!-- Key Metrics -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
        <div class="bg-white dark:bg-gray-800 shadow rounded-lg p-6">
            <h3 class="text-lg font-semibold text-gray-700 dark:text-gray-300 mb-4">Average Customer Age</h3>
            <div id="avg-age-metric" class="text-3xl font-bold text-gray-900 dark:text-white"></div>
            <p class="text-sm text-gray-500 dark:text-gray-400 mt-2">years old</p>
        </div>
        <div class="bg-white dark:bg-gray-800 shadow rounded-lg p-6">
            <h3 class="text-lg font-semibold text-gray-700 dark:text-gray-300 mb-4">Gender Ratio</h3>
            <div id="gender-ratio-metric" class="text-3xl font-bold text-gray-900 dark:text-white"></div>
            <p class="text-sm text-gray-500 dark:text-gray-400 mt-2">male to female ratio</p>
        </div>
        <div class="bg-white dark:bg-gray-800 shadow rounded-lg p-6">
            <h3 class="text-lg font-semibold text-gray-700 dark:text-gray-300 mb-4">Most Active Age Group</h3>
            <div id="active-age-metric" class="text-3xl font-bold text-gray-900 dark:text-white"></div>
            <p class="text-sm text-gray-500 dark:text-gray-400 mt-2">by transaction volume</p>
        </div>
    </div>

    <!-- Age Distribution -->
    <div class="grid grid-cols-1 xl:grid-cols-2 gap-6 mb-6">
        <!-- Age Distribution Chart -->
        <div class="bg-white dark:bg-gray-800 shadow rounded-lg p-6">
            <h2 class="text-lg font-semibold text-gray-700 dark:text-gray-300 mb-4">
                Age Distribution
            </h2>
            <div class="h-80">
                <canvas id="ageDistributionChart"></canvas>
            </div>
        </div>

        <!-- Gender Distribution Chart -->
        <div class="bg-white dark:bg-gray-800 shadow rounded-lg p-6">
            <h2 class="text-lg font-semibold text-gray-700 dark:text-gray-300 mb-4">
                Gender Distribution
            </h2>
            <div class="h-80">
                <canvas id="genderDistributionChart"></canvas>
            </div>
        </div>

        <!-- Gender by Age Group Chart -->
        <div class="bg-white dark:bg-gray-800 shadow rounded-lg p-6">
            <h2 class="text-lg font-semibold text-gray-700 dark:text-gray-300 mb-4">
                Gender Distribution by Age Group
            </h2>
            <div class="h-80">
                <canvas id="genderAgeChart"></canvas>
            </div>
        </div>

        <!-- Sales by Age Group Chart -->
        <div class="bg-white dark:bg-gray-800 shadow rounded-lg p-6">
            <h2 class="text-lg font-semibold text-gray-700 dark:text-gray-300 mb-4">
                Total Sales by Age Group
            </h2>
            <div class="h-80">
                <canvas id="ageSalesChart"></canvas>
            </div>
        </div>
    </div>

    <!-- Sales Analysis -->
    <div class="bg-white dark:bg-gray-800 shadow rounded-lg p-6 mb-6">
        <h2 class="text-lg font-semibold text-gray-700 dark:text-gray-300 mb-4">
            Sales Distribution by Gender and Age
        </h2>
        <div class="h-96">
            <canvas id="genderAgeSalesChart"></canvas>
        </div>
    </div>

    <!-- Detailed Demographics Table -->
    <div class="bg-white dark:bg-gray-800 shadow rounded-lg p-6">
        <h2 class="text-lg font-semibold text-gray-700 dark:text-gray-300 mb-4">
            Detailed Demographics
        </h2>
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                <thead>
                    <tr>
                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase">Age Group</th>
                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase">Total Customers</th>
                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase">Male</th>
                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase">Female</th>
                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase">Total Sales</th>
                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase">Avg. Order Value</th>
                    </tr>
                </thead>
                <tbody id="demographics-table" class="divide-y divide-gray-200 dark:divide-gray-700">
                    <tr>
                        <td colspan="6" class="px-4 py-4 text-center text-sm text-gray-500 dark:text-gray-400">
                            <div class="flex items-center justify-center">
                                <div class="inline-block animate-spin rounded-full h-6 w-6 border-b-2 border-blue-500"></div>
                                <span class="ml-2">Loading data...</span>
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
    // Chart instances
    let ageDistChart = null;
    let genderDistChart = null;
    let genderAgeChart = null;
    let ageSalesChart = null;
    let genderAgeSalesChart = null;
    
    // Theme-aware colors
    const isDarkMode = document.documentElement.classList.contains('dark');
    const gridColor = isDarkMode ? 'rgba(255,255,255,0.1)' : 'rgba(0,0,0,0.05)';
    const textColor = isDarkMode ? '#cbd5e0' : '#4a5568';
    
    // Status message functions
    function showStatus(message, isError = false) {
        const statusEl = document.getElementById('status-message');
        statusEl.className = isError 
            ? 'mb-6 p-4 bg-red-100 border-l-4 border-red-500 text-red-700' 
            : 'mb-6 p-4 bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700';
        statusEl.innerHTML = `<p>${message}</p>`;
        statusEl.classList.remove('hidden');
        
        if (!isError) {
            setTimeout(() => {
                statusEl.classList.add('hidden');
            }, 3000);
        }
    }
    
    function showSuccess(message) {
        const statusEl = document.getElementById('status-message');
        statusEl.className = 'mb-6 p-4 bg-green-100 border-l-4 border-green-500 text-green-700';
        statusEl.innerHTML = `<p>${message}</p>`;
        statusEl.classList.remove('hidden');
        
        setTimeout(() => {
            statusEl.classList.add('hidden');
        }, 3000);
    }
    
    // Initialize and add event listeners
    document.addEventListener('DOMContentLoaded', function() {
        console.log('DOM Content Loaded');
        loadDemographicsData();
        
        document.getElementById('apply-filters').addEventListener('click', loadDemographicsData);
    });

    // Load data from API
    function loadDemographicsData() {
        const period = document.getElementById('time-period').value;
        
        console.log('Loading demographics data for period:', period);
        showStatus('Loading demographics data...');
        
        fetch(`/api/analytics/demographics/?period=${period}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                console.log('Response received');
                return response.json();
            })
            .then(data => {
                console.log('Data received:', data);
                
                try {
                    updateMetrics(data);
                    renderAgeDistribution(data.age_distribution);
                    renderGenderDistribution(data.gender_distribution);
                    renderGenderAgeDistribution(data.gender_age_distribution);
                    renderAgeSales(data.age_sales);
                    renderGenderAgeSales(data.gender_age_sales);
                    renderDemographicsTable(data.detailed_demographics);
                    
                    showSuccess('Data loaded successfully!');
                    console.log('All charts should be rendered now');
                } catch (err) {
                    console.error('Error rendering charts:', err);
                    showStatus('Error rendering charts: ' + err.message, true);
                }
            })
            .catch(error => {
                console.error('Error loading demographics data:', error);
                showStatus('Error loading data: ' + error.message, true);
            });
    }

    // Update metrics display
    function updateMetrics(data) {
        document.getElementById('avg-age-metric').textContent = data.average_age.toFixed(1);
        document.getElementById('gender-ratio-metric').textContent = data.gender_ratio.toFixed(2);
        document.getElementById('active-age-metric').textContent = data.most_active_age_group;
    }

    // Age Distribution Chart
    function renderAgeDistribution(data) {
        console.log('Rendering age distribution chart with data:', data);
        
        const chartCanvas = document.getElementById('ageDistributionChart');
        if (!chartCanvas) {
            console.error('Age distribution chart canvas element not found!');
            return;
        }
        
        const ctx = chartCanvas.getContext('2d');
        if (!ctx) {
            console.error('Could not get 2D context for age chart');
            return;
        }
        
        if (ageDistChart) {
            console.log('Destroying existing age chart');
            ageDistChart.destroy();
        }

        try {
            console.log('Creating new age chart');
            ageDistChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: data.labels,
                    datasets: [{
                        label: 'Number of Customers',
                        data: data.values,
                        backgroundColor: 'rgba(59, 130, 246, 0.8)',
                        borderColor: 'rgb(59, 130, 246)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        x: {
                            grid: {
                                display: false
                            },
                            ticks: {
                                color: textColor
                            }
                        },
                        y: {
                            beginAtZero: true,
                            grid: {
                                color: gridColor
                            },
                            ticks: {
                                color: textColor
                            }
                        }
                    }
                }
            });
            console.log('Age distribution chart created successfully');
        } catch (err) {
            console.error('Error creating age distribution chart:', err);
            throw err;
        }
    }

    // Gender Distribution Chart
    function renderGenderDistribution(data) {
        console.log('Rendering gender distribution chart with data:', data);
        
        const chartCanvas = document.getElementById('genderDistributionChart');
        if (!chartCanvas) {
            console.error('Gender distribution chart canvas element not found!');
            return;
        }
        
        const ctx = chartCanvas.getContext('2d');
        if (!ctx) {
            console.error('Could not get 2D context for gender chart');
            return;
        }
        
        if (genderDistChart) {
            console.log('Destroying existing gender chart');
            genderDistChart.destroy();
        }
        
        try {
            console.log('Creating new gender chart');
            genderDistChart = new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: ['Male', 'Female'],
                    datasets: [{
                        data: [data.male, data.female],
                        backgroundColor: ['rgba(14, 165, 233, 0.8)', 'rgba(236, 72, 153, 0.8)']
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom',
                            labels: {
                                color: textColor
                            }
                        }
                    }
                }
            });
            console.log('Gender distribution chart created successfully');
        } catch (err) {
            console.error('Error creating gender distribution chart:', err);
            throw err;
        }
    }

    // Gender Age Distribution Chart
    function renderGenderAgeDistribution(data) {
        console.log('Rendering gender age distribution chart with data:', data);
        
        const chartCanvas = document.getElementById('genderAgeChart');
        if (!chartCanvas) {
            console.error('Gender age chart canvas element not found!');
            return;
        }
        
        const ctx = chartCanvas.getContext('2d');
        if (!ctx) {
            console.error('Could not get 2D context for gender age chart');
            return;
        }
        
        if (genderAgeChart) {
            console.log('Destroying existing gender age chart');
            genderAgeChart.destroy();
        }
        
        try {
            console.log('Creating new gender age chart');
            genderAgeChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: data.age_groups,
                    datasets: [
                        {
                            label: 'Male',
                            data: data.male,
                            backgroundColor: 'rgba(14, 165, 233, 0.8)',
                            borderColor: 'rgb(14, 165, 233)',
                            borderWidth: 1
                        },
                        {
                            label: 'Female',
                            data: data.female,
                            backgroundColor: 'rgba(236, 72, 153, 0.8)',
                            borderColor: 'rgb(236, 72, 153)',
                            borderWidth: 1
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                            labels: {
                                color: textColor
                            }
                        }
                    },
                    scales: {
                        x: {
                            grid: {
                                display: false
                            },
                            ticks: {
                                color: textColor
                            }
                        },
                        y: {
                            beginAtZero: true,
                            grid: {
                                color: gridColor
                            },
                            ticks: {
                                color: textColor
                            }
                        }
                    }
                }
            });
            console.log('Gender age distribution chart created successfully');
        } catch (err) {
            console.error('Error creating gender age distribution chart:', err);
            throw err;
        }
    }

    // Age Sales Chart
    function renderAgeSales(data) {
        console.log('Rendering age sales chart with data:', data);
        
        const chartCanvas = document.getElementById('ageSalesChart');
        if (!chartCanvas) {
            console.error('Age sales chart canvas element not found!');
            return;
        }
        
        const ctx = chartCanvas.getContext('2d');
        if (!ctx) {
            console.error('Could not get 2D context for age sales chart');
            return;
        }
        
        if (ageSalesChart) {
            console.log('Destroying existing age sales chart');
            ageSalesChart.destroy();
        }
        
        try {
            console.log('Creating new age sales chart');
            ageSalesChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: data.age_groups,
                    datasets: [{
                        label: 'Total Sales',
                        data: data.sales,
                        backgroundColor: 'rgba(16, 185, 129, 0.8)',
                        borderColor: 'rgb(16, 185, 129)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        x: {
                            grid: {
                                display: false
                            },
                            ticks: {
                                color: textColor
                            }
                        },
                        y: {
                            beginAtZero: true,
                            grid: {
                                color: gridColor
                            },
                            ticks: {
                                color: textColor,
                                callback: function(value) {
                                    return '$' + value.toLocaleString();
                                }
                            }
                        }
                    }
                }
            });
            console.log('Age sales chart created successfully');
        } catch (err) {
            console.error('Error creating age sales chart:', err);
            throw err;
        }
    }

    // Gender Age Sales Chart
    function renderGenderAgeSales(data) {
        console.log('Rendering gender age sales chart with data:', data);
        
        const chartCanvas = document.getElementById('genderAgeSalesChart');
        if (!chartCanvas) {
            console.error('Gender age sales chart canvas element not found!');
            return;
        }
        
        const ctx = chartCanvas.getContext('2d');
        if (!ctx) {
            console.error('Could not get 2D context for gender age sales chart');
            return;
        }
        
        if (genderAgeSalesChart) {
            console.log('Destroying existing gender age sales chart');
            genderAgeSalesChart.destroy();
        }
        
        try {
            console.log('Creating new gender age sales chart');
            genderAgeSalesChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: ['Male', 'Female'],
                    datasets: data.age_groups.map((age_group, index) => ({
                        label: age_group,
                        data: [data.male_sales[index], data.female_sales[index]],
                        backgroundColor: `hsla(${index * 360 / data.age_groups.length}, 70%, 60%, 0.8)`
                    }))
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'right',
                            labels: {
                                color: textColor
                            }
                        }
                    },
                    scales: {
                        x: {
                            grid: {
                                display: false
                            },
                            ticks: {
                                color: textColor
                            }
                        },
                        y: {
                            grid: {
                                color: gridColor
                            },
                            ticks: {
                                color: textColor,
                                callback: function(value) {
                                    return '$' + value.toLocaleString();
                                }
                            },
                            stacked: true
                        }
                    }
                }
            });
            console.log('Gender age sales chart created successfully');
        } catch (err) {
            console.error('Error creating gender age sales chart:', err);
            throw err;
        }
    }

    // Demographics Table
    function renderDemographicsTable(data) {
        console.log('Rendering demographics table with data:', data);
        
        try {
            const tableBody = document.getElementById('demographics-table');
            tableBody.innerHTML = '';

            data.forEach(row => {
                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td class="px-4 py-2 whitespace-nowrap text-sm text-gray-900 dark:text-gray-200">${row.age_group}</td>
                    <td class="px-4 py-2 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">${row.total_customers.toLocaleString()}</td>
                    <td class="px-4 py-2 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">${row.male_customers.toLocaleString()}</td>
                    <td class="px-4 py-2 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">${row.female_customers.toLocaleString()}</td>
                    <td class="px-4 py-2 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">$${row.total_sales.toLocaleString()}</td>
                    <td class="px-4 py-2 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">$${row.avg_order_value.toLocaleString()}</td>
                `;
                tableBody.appendChild(tr);
            });
            console.log('Demographics table rendered successfully');
        } catch (err) {
            console.error('Error rendering demographics table:', err);
            throw err;
        }
    }

    // Theme change listener
    document.addEventListener('theme-changed', function() {
        loadDemographicsData();
    });
</script>
{% endblock %}
